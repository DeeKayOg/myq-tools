package myqlib

import (
	`bytes`
	`fmt`
	`strconv`
	`strings`
	`time`
)

// Time Columns
var (
	Timestamp_col Col = NewFuncCol(`time`, `Time data was printed`, 8,
		func(b *bytes.Buffer, state *MyqState, c Col) {
			c.WriteString(b, time.Now().Format(`15:04:05`))
		})

	Runtime_col Col = NewFuncCol(`time`, `Interval since data started`, 8,
		func(b *bytes.Buffer, state *MyqState, c Col) {
			runtime := time.Duration(state.Cur.getI(`uptime`)-state.FirstUptime) * time.Second
			c.WriteString(b, runtime.String())
		})
)

func DefaultViews() map[string]View {
	return map[string]View{
		`cttf`: NewNormalView(`Connections, Threads, Tables, and Files`,
			NewGroupCol(`Connects`, `Connection related metrics`,
				NewRateCol(`cons`, `Connections per second`, 4, `connections`, 0, NumberUnits),
				NewRateCol(`acns`, `Aborted connections per second`, 4, `aborted_connects`, 0, NumberUnits),
				NewRateCol(`acls`, `Aborted Clients (those with existing connections) per second`, 4, `aborted_clients`, 0, NumberUnits),
			),
			NewGroupCol(`Threads`, `Thread related metrics`,
				NewGaugeCol(`conn`, `Threads Connected`, 4, `threads_connected`, 0, NumberUnits),
				NewGaugeCol(`run`, `Threads running`, 4, `threads_running`, 0, NumberUnits),
				NewGaugeCol(`cach`, `Threads Cached`, 4, `threads_cached`, 0, NumberUnits),
				NewRateCol(`crtd`, `Threads Created per second`, 4, `threads_created`, 0, NumberUnits),
				NewRateCol(`slow`, `Threads that were slow to launch per second`, 4, `slow_launch_threads`, 0, NumberUnits),
			),
			NewGroupCol(`Pool`, `Thread Pool metrics`,
				NewGaugeCol(`tot`, `Threadpool Threads`, 4, `threadpool_threads`, 0, NumberUnits),
				NewGaugeCol(`idle`, `Threadpool Idle Threads`, 4, `threadpool_idle_threads`, 0, NumberUnits),
			),
			NewGroupCol(`Tables`, `Table metrics`,
				NewGaugeCol(`open`, `Open Tables`, 4, `open_tables`, 0, NumberUnits),
				NewRateCol(`opns`, `Opened Tables per Second`, 4, `opened_tables`, 0, NumberUnits),
				NewRateCol(`immd`, `Immediate Table locks`, 4, `table_locks_immediate`, 0, NumberUnits),
				NewRateCol(`wait`, `Table locks Waited`, 4, `table_locks_waited`, 0, NumberUnits),
			),
			NewGroupCol(`Defs`, `Table Definition Metrics`,
				NewGaugeCol(`open`, `Open Table Definitions`, 4, `open_table_definitions`, 0, NumberUnits),
				NewGaugeCol(`opns`, `Opened Table Definitions per Second`, 4, `opened_table_definitions`, 0, NumberUnits),
			),
			NewGroupCol(`Files`, `File Metrics`,
				NewGaugeCol(`open`, `Open Files`, 4, `open_files`, 0, NumberUnits),
				NewRateCol(`opns`, `Opened Files per Second`, 4, `opened_files`, 0, NumberUnits),
			),
		),
		`coms`: NewNormalView(`MySQL Commands`,
			NewRateCol(`sel`, `Selects per second`, 4, `com_select`, 0, NumberUnits),
		),
		`throughput`: NewNormalView(`MySQL Server Throughput`,
			NewGroupCol(`Throughput`, `Bytes in/out of the server`,
				NewRateCol(`recv`, `Bytes received / sec`, 5, `bytes_received`, 0, MemoryUnits),
				NewRateCol(`sent`, `Bytes sent / sec`, 5, `bytes_sent`, 0, MemoryUnits),
			),
		),
		`query`: NewNormalView(`Query types and sorts`,
			NewRateCol(`slow`, `Slow queries per second`, 4, `slow_queries`, 0, NumberUnits),
			NewGroupCol(`Selects`, `Select Types`,
				NewRateCol(`fjn`, `Full Joins / sec`, 5, `select_full_join`, 0, NumberUnits),
				NewRateCol(`frj`, `Full Range Joins / sec`, 5, `select_full_range_join`, 0, NumberUnits),
				NewRateCol(`rang`, `Range / sec`, 5, `select_range`, 0, NumberUnits),
				NewRateCol(`rchk`, `Range Check / sec`, 5, `select_range_check`, 0, NumberUnits),
				NewRateCol(`scan`, `Scan / sec`, 5, `select_scan`, 0, NumberUnits),
			),
			NewGroupCol(`Sorts`, `Sort Types`,
				NewRateCol(`pass`, `Merge Passes / sec`, 5, `sort_merge_passes`, 0, NumberUnits),
				NewRateCol(`rang`, `Range / sec`, 5, `sort_range`, 0, NumberUnits),
				NewRateCol(`rows`, `Rows / sec`, 5, `sort_rows`, 0, NumberUnits),
				NewRateCol(`scan`, `Scan / sec`, 5, `sort_scan`, 0, NumberUnits),
			),
		),
		`temp`: NewNormalView(`Internal Temporary Tables`,
			NewRateCol(`tmps`, `Temporary Tables / second`, 5, `created_tmp_tables`, 0, NumberUnits),
			NewRateCol(`disk`, `On Disk Temp Tables / second`, 5, `created_tmp_disk_tables`, 0, NumberUnits),
			NewRateCol(`files`, `Temp Files / second`, 5, `created_tmp_files`, 0, NumberUnits),
		),
		`handler`: NewNormalView(`Storage Engine Handler metrics`,
			NewGroupCol(`Reads`, `Handler read stats`,
				NewRateCol(`rfst`, `Read First / s`, 5, `handler_read_first`, 0, NumberUnits),
				NewRateCol(`rkey`, `Read Key / s`, 5, `handler_read_key`, 0, NumberUnits),
				NewRateCol(`rnex`, `Read Next / s`, 5, `handler_read_next`, 0, NumberUnits),
				NewRateCol(`rprv`, `Read Prev / s`, 5, `handler_read_prev`, 0, NumberUnits),
				NewRateCol(`rrd`, `Random reads / s`, 5, `handler_read_rnd`, 0, NumberUnits),
				NewRateCol(`rrdn`, `Read First / s`, 5, `handler_read_rnd_next`, 0, NumberUnits),
			),
			NewGroupCol(`Other`, `Other handler stats`,
				NewRateCol(`ins`, `Inserts / s`, 5, `handler_write`, 0, NumberUnits),
				NewRateCol(`upd`, `Updates / s`, 5, `handler_update`, 0, NumberUnits),
				NewRateCol(`del`, `Deletes / s`, 5, `handler_delete`, 0, NumberUnits),
				NewRateCol(`cmt`, `Commits / s`, 5, `handler_commit`, 0, NumberUnits),
				NewRateCol(`rbk`, `Rollbacks / s`, 5, `handler_rollback`, 0, NumberUnits),
				NewRateCol(`disc`, `Discovers / s`, 5, `handler_discover`, 0, NumberUnits),
			),
		),
		`innodb`: NewNormalView(`Innodb metrics`,
			NewGroupCol(`Row Operations`, `Row-level operations`,
				NewRateCol(`read`, `Reads / s`, 5, `innodb_rows_read`, 0, NumberUnits),
				NewRateCol(`ins`, `Inserts / s`, 5, `innodb_rows_inserted`, 0, NumberUnits),
				NewRateCol(`upd`, `Updates / s`, 5, `innodb_rows_updated`, 0, NumberUnits),
				NewRateCol(`del`, `Deletes / s`, 5, `innodb_rows_deleted`, 0, NumberUnits),
			),
			NewGroupCol(`Buffer Pool (pages)`, `Page-level operations`,
				NewRateCol(`logr`, `Read Requests (Logical) / s`, 5, `innodb_buffer_pool_read_requests`, 0, NumberUnits),
				NewRateCol(`phyr`, `Reads (Physical) / s`, 5, `innodb_buffer_pool_reads`, 0, NumberUnits),
				NewRateCol(`logw`, `Write Requests / s`, 5, `innodb_buffer_pool_write_requests`, 0, NumberUnits),
				NewRateCol(`phyw`, `Writes (Physical) / s`, 5, `innodb_buffer_pool_pages_flushed`, 0, NumberUnits),
				NewPercentCol(`%dirt`, `Buffer pool %dirty`, 5, `innodb_buffer_pool_pages_dirty`, `innodb_buffer_pool_pages_total`, 0),
			),
		),
		`innodb_buffer_pool`: NewNormalView(`Innodb Buffer Pool stats`,
			NewGroupCol(`Row Operations`, `Row-level operations`,
				NewRateCol(`read`, `Reads / s`, 5, `innodb_rows_read`, 0, NumberUnits),
				NewRateCol(`ins`, `Inserts / s`, 5, `innodb_rows_inserted`, 0, NumberUnits),
				NewRateCol(`upd`, `Updates / s`, 5, `innodb_rows_updated`, 0, NumberUnits),
				NewRateCol(`del`, `Deletes / s`, 5, `innodb_rows_deleted`, 0, NumberUnits),
			),
			NewGroupCol(`Buffer Pool (pages)`, `Page-level operations`,
				NewRateCol(`logr`, `Read Requests (Logical) / s`, 5, `innodb_buffer_pool_read_requests`, 0, NumberUnits),
				NewRateCol(`phyr`, `Reads (Physical) / s`, 5, `innodb_buffer_pool_reads`, 0, NumberUnits),
				NewRateCol(`logw`, `Write Requests / s`, 5, `innodb_buffer_pool_write_requests`, 0, NumberUnits),
				NewRateCol(`phyw`, `Writes (Physical) / s`, 5, `innodb_buffer_pool_pages_flushed`, 0, NumberUnits),
				NewPercentCol(`%dirt`, `Buffer pool %dirty`, 5, `innodb_buffer_pool_pages_dirty`, `innodb_buffer_pool_pages_total`, 0),
			),
		),
		`wsrep`: NewExtraHeaderView(`Galera Wsrep statistics`,
			func(b *bytes.Buffer, state *MyqState) {
				b.WriteString(fmt.Sprintf(`%s / %s (idx: %d) / %s %s`, state.Cur.getStr(`V_wsrep_cluster_name`),
					state.Cur.getStr(`V_wsrep_node_name`), state.Cur.getI(`wsrep_local_index`),
					state.Cur.getStr(`wsrep_provider_name`), state.Cur.getStr(`wsrep_provider_version`)))
			},
			NewGroupCol(`Cluster`, `Cluster-wide stats (at least according to this node)`,
				NewStringCol(`P`, `Primary (P) or Non-primary (N)`, 1, `wsrep_cluster_status`),
				NewRightmostCol(`cnf`, `Cluster configuration id (increments every time a node joins/leaves the cluster)`, 3, `wsrep_cluster_conf_id`),
				NewGaugeCol(`#`, `Cluster size`, 2, `wsrep_cluster_size`, 0, NumberUnits),
			),
			NewGroupCol(`Node`, `Node's specific state`,
				NewStringCol(`state`, `State of this node`, 4, `wsrep_local_state_comment`),
			),
			NewFuncCol(`laten`, `Average replication latency`, 5, func(b *bytes.Buffer, state *MyqState, c Col) {
				vals := strings.Split(state.Cur.getStr(`wsrep_evs_repl_latency`), `/`)

				// Expecting 5 vals here, filler if not
				if len(vals) != 5 {
					c.Filler(b)
				} else {
					if avg, err := strconv.ParseFloat(vals[1], 64); err == nil {
						cv := collapse_number(avg, c.Width(), 2, SecondUnits)
						b.WriteString(fmt.Sprintf(fmt.Sprint(`%`, c.Width(), `s`), cv))
					} else {
						c.Filler(b)
					}
				}
			}),
			NewGroupCol(`Outbound`, `Sent replication events`,
				NewRateCol(`msgs`, `Replicated messages (usually transactions) per second`, 4, `wsrep_replicated`, 0, NumberUnits),
				NewRateCol(`data`, `Replicated bytes per second`, 4, `wsrep_replicated_bytes`, 0, MemoryUnits),
				NewGaugeCol(`queue`, `Outbound replication queue`, 3, `wsrep_local_send_queue`, 0, NumberUnits),
			),
			NewGroupCol(`Inbound`, `Received replication events`,
				NewRateCol(`msgs`, `Received messages (usually transactions) per second`, 4, `wsrep_received`, 0, NumberUnits),
				NewRateCol(`data`, `Received bytes per second`, 4, `wsrep_received_bytes`, 0, MemoryUnits),
				NewGaugeCol(`queue`, `Received replication apply queue`, 3, `wsrep_local_recv_queue`, 0, NumberUnits),
			),
			NewGroupCol(`FlowC`, `Flow control stats`,
				NewDiffCol(`paused`, `Flow control paused (could be from anywhere in the cluster)`, 5, `wsrep_flow_control_paused_ns`, 0, NanoSecondUnits),
				NewDiffCol(`snt`, `Flow control sent messages (could be starting or stopping FC)`, 3, `wsrep_flow_control_sent`, 0, NumberUnits),
			),
			NewGroupCol(`Cnflcts`, `Galera replication conflicts (on this node)`,
				NewDiffCol(`lcf`, `Local certification failures since last sample`, 3, `wsrep_local_cert_failures`, 0, NumberUnits),
				NewDiffCol(`bfa`, `Brute force aborts since last sample`, 3, `wsrep_local_bf_aborts`, 0, NumberUnits),
			),
			NewGroupCol(`Gcache`, `Galera cache (gcache) information`,
				NewCurDiffCol(`ist`, `Gcached transactions`, 5, `wsrep_last_committed`, `wsrep_local_cached_downto`, 0, NumberUnits),
				NewGaugeCol(`idx`, `Certification index size (keys)`, 4, `wsrep_cert_index_size`, 0, NumberUnits),
			),
			NewGroupCol(`Apply`, `Theoretical and actual apply efficiency`,
				NewPercentCol(`%ef`, `Percent of threads being used`, 4, `wsrep_apply_window`, `V_wsrep_slave_threads`, 0),
			),
		),
		`qcache`: NewNormalView(`Query cache stats`,
			NewStringCol(`type`, `Query cache type`, 6, `V_query_cache_type`),
			NewRateSumCol(`sel`, `Total Selects + Qcache Hits per second`, 4, 0, NumberUnits, `com_select`, `qcache_hits`),
			NewRateCol(`hits`, `Query cache hits per second`, 4, `qcache_hits`, 0, NumberUnits),
			NewRateCol(`ins`, `Query inserts per second (new entries to the cache)`, 4, `qcache_inserts`, 0, NumberUnits),
			NewRateCol(`notc`, `Queries not cached per second (either can't be cached, or SELECT SQL_NO_CACHE)`, 4, `qcache_not_cached`, 0, NumberUnits),
			NewGaugeCol(`tot`, `Total queries in the cache`, 4, `qcache_queries_in_cache`, 0, NumberUnits),
			NewRateCol(`lowm`, `Low memory prunes (cache entries removed due to memory limit)`, 4, `qcache_lowmem_prunes`, 0, NumberUnits),
			NewPercentCol(`%free`, `Percent of cache memory free`, 5, `qcache_free_blocks`, `qcache_total_blocks`, 0),
		),
		`myisam`: NewNormalView(`MyISAM stats`,
			NewGroupCol(`Key Buffer`, `Key Buffer Stats`,
				NewGaugeCol(`used`, `Current Key Buffer blocks unused`, 6, `key_blocks_unused`, 0, NumberUnits),
				NewGaugeCol(`maxu`, `Maxiumum Key Buffer blocks used`, 6, `key_blocks_used`, 0, NumberUnits),
			),
			NewGroupCol(`I/O`, `MyISAM Key Buffer IO Stats (not data)`,
				NewRateCol(`logr`, `Logical read requests`, 5, `key_read_requests`, 0, NumberUnits),
				NewRateCol(`phyr`, `Physical reads (cache misses)`, 5, `key_reads`, 0, NumberUnits),
				NewRateCol(`logw`, `Logical write requests`, 5, `key_write_requests`, 0, NumberUnits),
				NewRateCol(`phyw`, `Physical writes`, 5, `key_writes`, 0, NumberUnits),
			),
		),
	}
}
